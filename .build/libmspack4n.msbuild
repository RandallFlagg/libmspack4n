<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Init;Build;Deploy;Zip;NugetPackage">
	<!--
	References:
		MSBuild: http://msdn.microsoft.com/en-us/library/vstudio/dd393574.aspx
		MSBuild Well-Known Properties: https://msdn.microsoft.com/en-us/library/ms164309.aspx
    MSBuild Task Reference: https://msdn.microsoft.com/en-us/library/7z253716.aspx
	-->

  <PropertyGroup>
    <MSBuildCommunityTasksPath>$(MSBuildProjectDirectory)</MSBuildCommunityTasksPath>
  </PropertyGroup>
  <Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.Targets" />

  <PropertyGroup>
		<RootDir>..\</RootDir>
    <BuildDir>$(MSBuildProjectDirectory)</BuildDir>
    <TheDeployDir>$(RootDir)\.deploy</TheDeployDir>
		<AssemblyCopyright>Copyright Scott Willeke Â©2013-2016</AssemblyCopyright>
    <Description>A .NET version of the libmspack libmspack library that enables programatically reading and extracting the content of Microsoft cab files.</Description>
    <TheProjName>libmspack4n</TheProjName>
		<TheZipFileName>$(TheProjName)-v$(TheVersion).zip</TheZipFileName>

    <MSPackSrcDir>$(RootDir)\Packages\libmspack\mspack</MSPackSrcDir>
    <MSPackOutDir>$(RootDir)\Packages\libmspack\mspack\bin</MSPackOutDir>
  </PropertyGroup>

	<ItemGroup>
		<TheProjects Include="$(RootDir)\libmspack4n\libmspack4n.csproj"></TheProjects>
    <TheProjects Include="$(RootDir)\libmspack4ntest\libmspack4ntest.csproj"></TheProjects>
  </ItemGroup>

	<ItemGroup>
		<DeployFiles Include="$(MSPackOutDir)\mspack.dll"></DeployFiles>
    <DeployFiles Include="$(RootDir)\libmspack4n\bin\Release\libmspackn.dll"></DeployFiles>
	</ItemGroup>

	<Target Name="Init">
		<ConvertToAbsolutePath Paths="$(RootDir)">
			<Output TaskParameter="AbsolutePaths" PropertyName="RootDir"/>
		</ConvertToAbsolutePath>
		<!-- Apparently the PropertyGroup values are evaluated early and not reevaluated on demand because I had to run this again to get it to accept the new root dir value -->
		<ConvertToAbsolutePath Paths="$(TheDeployDir)">
			<Output TaskParameter="AbsolutePaths" PropertyName="TheDeployDir"/>
		</ConvertToAbsolutePath>
    <ConvertToAbsolutePath Paths="$(MSPackSrcDir)">
      <Output TaskParameter="AbsolutePaths" PropertyName="MSPackSrcDir"/>
    </ConvertToAbsolutePath>
    <ConvertToAbsolutePath Paths="$(MSPackOutDir)">
      <Output TaskParameter="AbsolutePaths" PropertyName="MSPackOutDir"/>
    </ConvertToAbsolutePath>
    

    <Message Text="Project File Name = $(MSBuildProjectFile)" />
    <Message Text="Project Extension = $(MSBuildProjectExtension)" />
    <Message Text="MSBuildProjectDirectory = $(MSBuildProjectDirectory)" />
    <Message Text="SolutionDir = $(SolutionDir)" />

    <Message Text="RootDir=$(RootDir)" />
    <Message Text="TheDeployDir=$(TheDeployDir)" />

  </Target>

	<Target Name="Validate">
		<ItemGroup>
			<_RequiredProperties Include="TheVersion">
				<Value>$(TheVersion)</Value>
			</_RequiredProperties>
		</ItemGroup>

		<Error 
			Condition=" '%(_RequiredProperties.Value)'=='' "
			Text=" Missing required property [%(_RequiredProperties.Identity)]" 
		/>
	</Target>

	<Target Name="SetProjectVersion">
		
		<ItemGroup>
			<AssemblyInfoFiles Include="$(RootDir)\libmspack4n\Properties\AssemblyInfo.cs" />
		</ItemGroup>

		<AssemblyInfo 
			OutputFile="@(AssemblyInfoFiles)" 
			CodeLanguage="C#"
      AssemblyTitle="$(TheProjName)"
      AssemblyDescription="$(Description)"
      AssemblyConfiguration=""
      AssemblyCompany="Scott Willeke"
			AssemblyVersion="$(TheVersion)"
			AssemblyFileVersion="$(TheVersion)"
			AssemblyCopyright="$(AssemblyCopyright)"  
		>
    </AssemblyInfo>

	</Target>

	<Target Name="Clean">
		<Delete Files="$(TheDeployDir)\*.*"
            />
	</Target>

	<Target Name="Build" DependsOnTargets="Init;Validate;SetProjectVersion;BuildMspack">
		<Message Text="Building version: $(TheVersion)" />
		
		<Message Text="Absolute project path: %(TheProjects.FullPath)" />

		<MSBuild 
			Projects="%(TheProjects.FullPath)" 
			Properties="Configuration=Release;Platform=x86;ApplicationVersion=$(TheVersion);SolutionDir=$(RootDir)" 
			Targets="Rebuild"
		/>
	</Target>

  <Target Name="CleanMspack" DependsOnTargets="Init">
    <ItemGroup>
      <MsPackCleanFile Include="$(MSPackSrcDir)\config.h" />
      <MsPackCleanFile Include="$(MSPackOutDir)\*.*" />
    </ItemGroup>
    <Delete Files="@(MsPackCleanFile)" />
  </Target>
  
  <Target Name="BuildMspack" DependsOnTargets="Init;Validate;SetProjectVersion;CleanMspack">
    <!-- Bilds the C mspack library -->
    <ItemGroup>
      <CFiles Include="$(mspackdir)\*.c" />
    </ItemGroup>

    <!-- Generate config.h -->
    <Delete Files="$(MSPackSrcDir)\config.h" />
    <Exec Command="echo #define inline __inline > $(MSPackSrcDir)\config.h" />
    <Exec Command="echo #define HAVE_STRING_H 1 >> $(MSPackSrcDir)\config.h" />
    <Exec Command="echo #define HAVE_LIMITS_H 1 >> $(MSPackSrcDir)\config.h" />
    <Exec Command="echo #define HAVE_MEMCMP 1 >> $(MSPackSrcDir)\config.h" />

    <!-- 
    I tried to use msbuild's cl & link tasks but couldn't get them to work. So now using Exec
      MSBuild (Visual C++) Overview: https://msdn.microsoft.com/en-us/library/ee662426.aspx
    -->
    <!--
    NOTE: cl.exe is only found if using 'Developer Command Prompt for VS2015'. 
    WILL NOT BE FOUND if using 'MSBuild Command Prompt for VS2015'.
    cl /O2 -I.. -I. /DHAVE_CONFIG_H /c *.c
    -->
    <MakeDir Directories="$(MSPackOutDir)" />
    <Exec Command="cl.exe /O2 -I$(MSPackSrcDir) /DHAVE_CONFIG_H /c $(MSPackSrcDir)\*.c" 
          WorkingDirectory="$(MSPackOutDir)" />
    <!--
    link *.obj /DLL /DEF:mspack.def /IMPLIB:mspack.lib /OUT:mspack.dll
    -->
    <Exec Command="link.exe $(MSPackOutDir)\*.obj /DLL /DEF:$(MSPackSrcDir)\mspack.def /IMPLIB:$(MSPackOutDir)\mspack.lib /OUT:$(MSPackOutDir)\mspack.dll" 
          WorkingDirectory="$(MSPackOutDir)" />
</Target>

	<Target Name="Deploy" DependsOnTargets="Build;Clean">
		<MakeDir Directories="$(TheDeployDir)" />

		<Copy
            SourceFiles="%(DeployFiles.FullPath)"
            DestinationFolder="$(TheDeployDir)"
        />
	</Target>

	<Target Name="Zip" DependsOnTargets="Deploy">
    <!-- see https://github.com/loresoft/msbuildtasks/blob/master/Source/MSBuild.Community.Tasks/Zip.cs -->
    <Zip
			Files="@(DeployFiles)"
      Flatten="True"
			ZipFileName="$(TheDeployDir)\$(TheZipFileName)"
		/>
	</Target>

	<Target Name="NugetPackage" DependsOnTargets="Deploy">
		<!-- 
			See http://docs.nuget.org/Create/Creating-and-Publishing-a-Package
		 -->
    <PropertyGroup>
      <PackageDir>$(TheDeployDir)\nuget-package</PackageDir>
    </PropertyGroup>

    <!--
    <Copy
			SourceFiles="lessio.nuspec"
			DestinationFolder="$(PackageDir)"
		/>
    <XmlPoke
			XmlInputPath="$(PackageDir)\lessio.nuspec"
			Query="//package/metadata/version"
			Value="$(TheVersion)"
		/>
    <XmlPoke
          XmlInputPath="$(PackageDir)\lessio.nuspec"
          Query="//package/metadata/description"
          Value="$(Description)"
		/>
    
    <Exec
			Command="nuget pack &quot;$(PackageDir)\lessio.nuspec&quot; -NoDefaultExcludes -Verbosity Normal" 
			WorkingDirectory="$(PackageDir)"
			ContinueOnError="true"
		>
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode"/>
		</Exec>
		<Message Text="nuget exit code:$(ErrorCode)" />
		<Error
			Condition="$(ErrorCode)!=0"
			Text="nuget failed. Make sure you have nuget installed and accessible from the command line. See http://docs.nuget.org/docs/reference/command-line-reference"
		/>
		<Message 
			Text="Nuget package built. To test the nuget package run `nuget install lessio -source $(PackageDir)`"
			Importance="high"
		/>
    -->
		<Message
			Importance="high"
			Text="
Next Steps to publish:
- Tag the repo: `git tag v$(TheVersion)`
- Push the tag to github to create the release: `git push --tags`
- Upload $(TheZipFileName) at https://github.com/activescott/$(TheProjName)/releases/tag/v$(TheVersion)
- Run `nuget push $(PackageDir)\$(TheProjName).$(TheVersion).nupkg -Source https://www.nuget.org/api/v2/package -ApiKey 00000000-0000-0000-0000-00000000` to push to nuget package. Get API Key at https://www.nuget.org/account
" 
		/>
	</Target>
</Project>
